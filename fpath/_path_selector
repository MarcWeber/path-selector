# zsh shell autoload file

# sample usage:
# HQUICKFILE=path-to-path-selector-script
# autoload -Uz _path_selector
# bindkey '^g' _path_selector
# zle -N _path_selector
# then ctrl-g will complete a path

_nr_to_chars(){
  local chars="$2"
  local nr=$1

  local len=${#chars}
  local res=

  while :; do
    r=$(( $nr % $len ))
    nr=$(( $nr / $len ))
    res="${chars:$r:1}$res"
    [[ $nr != 0 ]] || {
      echo -n $res
      return 0
    }
  done
}

function select-one () {
  local opt strip i key
  local -a alts
  local chars="aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"

  if [[ $1 = -s ]]; then
    strip=$2
    shift; shift
  fi
  if [[ "$#@" -eq 0 ]]; then
    return 1
  elif [[ "$#@" -eq 1 ]]; then
    REPLY="$1"
    return
  elif [[ "$#@" -lt 10 ]]; then
    opt=(-sk)
  else
    opt=()
  fi
  alts=()
  for i ({1..$#@}) {
      key=$(_nr_to_chars $(( $i  - 1 )) "$chars")
      alts+=("$key: ${${@[$i]}#$strip}")
  }
  
  if zle; then
    zle -R '' $alts
  else
    print >&2 -l - $alts
  fi
  # read $opt
  unset REPLY
  read -sk
  input=$REPLY

  for i ({1..$#@}) {
      key=$(_nr_to_chars $(( $i  - 1 )) "$chars")
      if [[ "$input" == "$key" ]]; then
        REPLY=$@[$i]
      fi
  }
  if zle; then
    zle -R -c
  fi
}

_path_selector(){

  # much copy paste from modify-current-argument
  setopt localoptions noksharrays multibyte

  local -a reply
  integer REPLY REPLY2 fromend endoffset

  autoload -Uz split-shell-arguments
  split-shell-arguments

  split=$REPLY

  # Can't do this unless there's some text under or left of us.
  (( split < 2 )) && return 1

  # Get the index of the word we want.
  if (( split & 1 )); then
    # Odd position; need previous word.
    (( split-- ))
    # Pretend position was just after the end of it.
    (( REPLY2 = ${#reply[split]} + 1 ))
  fi

  # Work out offset from end of string
  (( fromend = $REPLY2 - ${#reply[split]} - 1 ))
  if (( fromend >= -1 )); then
    # Cursor is near the end of the word, we'll try to keep it there.
    endoffset=1
  fi

  # Length of all characters before current.
  # Force use of character (not index) counting and join without IFS.
  integer wordoff="${(cj..)#reply[1,split-1]}"

  # Replacement for current word.  This could do anything to ${reply[split]}.
  unset REPLY
  select-one $($HQUICKFILE --echo ${reply[split]})
  repl=$REPLY
  # select-one FIRST_OPT SECOND_OPT

  if (( !endoffset )) && [[ ${repl[fromend,-1]} = ${ARG[fromend,-1]} ]]; then
    # If the part of the string from here to the end hasn't changed,
    # leave the cursor this distance from the end instead of the beginning.
    endoffset=1
  fi

  # New line:  all words before and after current word, with
  # no additional spaces since we've already got the whitespace
  # and the replacement word in the middle.
  local left="${(j..)reply[1,split-1]}${repl}"
  local right="${(j..)reply[split+1,-1]}"

  if [[ endoffset -ne 0 && ${#repl} -ne 0 ]]; then
    # Place cursor relative to end.
    LBUFFER="$left"
    RBUFFER="$right"
    (( CURSOR += fromend ))
  else
    BUFFER="$left$right"

    # Keep cursor at same position in replaced word.
    # Redundant here, but useful if $repl changes the length.
    # Limit to the next position after the end of the word.
    integer repmax=$(( ${#repl} + 1 ))
    # Remember CURSOR starts from offset 0 for some reason, so
    # subtract 1 from positions.
    (( CURSOR = wordoff + (REPLY2 > repmax ? repmax : REPLY2) - 1 ))
  fi
}
